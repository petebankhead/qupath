plugins {
    id 'qupath.java-conventions'
    id 'jacoco'
    id 'io.github.qupath.platform'
    id 'org.bytedeco.gradle-javacpp-platform'
//    id 'checkstyle'
}

repositories {

    if (findProperty("use-maven-local")) {
        logger.warn("Using Maven local")
        mavenLocal()
    }

    mavenCentral()

    // May be required for snapshot JavaCPP jars
    maven {
        name 'Sonatype snapshots'
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }

    // Required for scijava (including some QuPath jars)
    maven {
    	name "SciJava"
	    url "https://maven.scijava.org/content/repositories/releases"
	}

    // May be required during development
    maven {
        name "SciJava snapshots"
        url "https://maven.scijava.org/content/repositories/snapshots"
    }

    // Required for Bio-Formats
    maven {
        name 'Unidata'
        url 'https://artifacts.unidata.ucar.edu/content/repositories/unidata-releases'
    }
    maven {
        name 'Open Microscopy'
        url 'https://artifacts.openmicroscopy.org/artifactory/maven/'
    }


}


/*
 * Some metadata for the manifest
 */
project.version = gradle.ext.qupathVersion

/*
 * Optionally use OpenCV with CUDA.
 * See https://github.com/bytedeco/javacpp-presets/tree/master/cuda for info (and licenses).
 */
def useCudaRedist = project.hasProperty('cuda-redist')
def useCuda = useCudaRedist || project.hasProperty('cuda')

/*
 * Handle OS-specific decisions
 */
String platform = properties['platform.shortName']
if (properties['platform.name'] == null)
    logger.warn('Unknown operating system!')
if ("32".equals(System.getProperty("sun.arch.data.model"))) {
    logger.warn("You appear to be using a 32-bit JDK - it is very possible some things won't work!")
    logger.warn("You may at least need to replace the OpenSlide dlls with 32-bit versions from https://openslide.org/download/")
}


/*
 * Preserve the version number
 */
project.file('src/main/resources/VERSION').setText(gradle.ext.qupathVersion, 'UTF-8')


configurations {
    opencv
    guava
}

dependencies {

    if (useCudaRedist) {
        opencv libs.bundles.opencv.cuda
    } else if (useCuda) {
        opencv libs.bundles.opencv.gpu
    } else
        opencv libs.bundles.opencv


    guava libs.guava

}


dependencies {
    testImplementation libs.junit
    testImplementation libs.junit.api
    testRuntimeOnly libs.junit.engine

    implementation libs.bundles.logging
}

tasks.named('test') {
    useJUnitPlatform()
}